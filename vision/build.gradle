plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'org.hidetake.ssh' version '2.9.0'
}

apply plugin: 'java'
apply plugin: 'application'

ext {
    buildType = "arm-raspbian"
    remoteDirectory = "/home/pi"
}
// Uncomment the line below to build for a Raspberry Pi running raspbian
//ext.buildType = "arm-raspbian"

// Uncomment the line below to build for an armhf device such as a Jetson or a Beaglebone Black
//ext.buildType = "armhf"

// Change the line below if you change the name of your main Java class
mainClassName = 'org.usfirst.frc.team1018.vision.Main'
// Change the line below to change the name of the output jar
def projectName = 'CameraVision'

// Shouldn't need to change anything below this point
apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
    compile ntcoreDep()
    compile cscoreDep()
    compile 'org.opencv:opencv-java:3.1.0'
    compile 'com.fazecast:jSerialComm:1.3.11'
    testCompile 'junit:junit:4.12'
}

jar {
    baseName = projectName
}

shadowJar {
    baseName = projectName
}

distributions {
    main {
        baseName = projectName
        contents {
            from(openCvUnzipLocation) {
                exclude 'META-INF'
                exclude '**/MANIFEST.MF'
                into 'bin/'
            }
        }
    }
}

def outputDirectory = file("${rootDir}/vision-output")

task writeExecuteScript() {
    dependsOn jar
    doLast {
        if (buildType == "windows") {
            def runFile = new File("${buildDir}/run${projectName}.bat")
            runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
        } else {
            def runFile = new File("${buildDir}/run${projectName}")
            runFile.write "#!/bin/bash\n" +
                    "SCRIPT=\$(readlink -f \"\$0\")\n" +
                    "LIBPATH=\$(dirname \"\$SCRIPT\")\n" +
                    "echo Loading libraries from: \$LIBPATH\n" +
                    "java -Djava.library.path=\$LIBPATH -jar \$LIBPATH/${projectName}-all.jar\n"
        }
    }
}

task copyToOutput(type: Copy) {
    dependsOn shadowJar
    dependsOn unzipOpenCv
    dependsOn writeExecuteScript
    destinationDir = outputDirectory
    from(file(shadowJar.archivePath)) {
    }
    from(openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
    }
    if (buildType == "windows") {
        from(file("${buildDir}/run${projectName}.bat")) {
        }
    } else {
        from(file("${buildDir}/run${projectName}")) {
        }
    }
}

task zipOutput(type: Zip) {
    baseName = projectName
    duplicatesStrategy = 'exclude'
    dependsOn shadowJar
    dependsOn unzipOpenCv
    destinationDir = outputDirectory
    from(file(shadowJar.archivePath)) {
    }
    from(openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
    }
    if (buildType == "windows") {
        from(file("${buildDir}/run${projectName}.bat")) {
        }
    } else {
        from(file("${buildDir}/run${projectName}")) {
            fileMode 0777
        }
    }
}

distZip.dependsOn unzipOpenCv
distTar.dependsOn unzipOpenCv

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

build.dependsOn copyToOutput
build.dependsOn zipOutput
run.dependsOn unzipOpenCv

clean {
    delete outputDirectory
}

ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    raspi {
        host = 'vision-1018-frc.local'
        user = 'pi'
        password = 'raspberry'
    }
}

task deploy() {
    doLast {
        ssh.run {
            session(remotes.raspi) {
                execute "sudo systemctl stop vision.service"
                put from: outputDirectory, into: '/home/pi/vision'
                execute "sudo chmod 777 /home/pi/vision/vision-output/run${projectName}"
                execute "sudo systemctl start vision.service"
            }
        }
    }
}

